import { execSync } from 'child_process';
import os from 'os';

interface Services {
  database: boolean;
  api: boolean;
  storage: boolean;
}

interface HealthStatus {
  status: string;
  timestamp: number;
  version: string;
  services: Services;
  uptime: number;
}

function checkPostgres(): boolean {
  try {
    execSync('pg_isready ' + [
      '-U', process.env.PGUSER || '',
      '-h', process.env.PGHOST || '',
      '-p', process.env.PGPORT || ''
    ].join(' '));
    return true;
  } catch {
    return false;
  }
}

export function checkHealth(): HealthStatus {
  const timestamp = Math.floor(Date.now() / 1000);
  const dbUrl = process.env.DATABASE_URL || '';
  const dbHealthy = dbUrl !== '' && checkPostgres();

  return {
    status: dbHealthy ? 'healthy' : 'degraded',
    timestamp,
    version: process.env.npm_package_version || '1.0.0',
    services: {
      database: dbHealthy,
      api: true,
      storage: dbHealthy
    },
    uptime: process.uptime()
  };
}

if (require.main === module) {
  console.log(JSON.stringify(checkHealth(), null, 2));
}

export type { HealthStatus, Services };
